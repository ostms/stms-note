doctype html
html(lang="ja")
	head
		meta(charset="UTF-8")
		meta(http-equiv="X-UA-Compatible", content="IE=edge")
		meta(name="viewport", content="width=device-width, initial-scale=1.0")
		title 属性 - pugドキュメント
		link(rel="stylesheet", href="src/属性.css")
		link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.3.1/styles/base16/eighties.min.css")
		script(src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.3.1/highlight.min.js") 
	body
		main#attributes
			h1 属性 - Attributes
			p
				| タグの属性は、見た目はHTMLと似ていますが（オプションでカンマ,を使用）、その値は通常のJavaScriptです。
				br
				| （注：このページの例では、空白の制御にパイプ文字（#[code |]）を使用しています。）
			.area_code-diff
				pre: code
					| a(href='//google.com') Google
					| |
					| |
					| a(class='button' href='//google.com') Google
					| |
					| |
					| a(class='button', href='//google.com') Google
				pre: code
					| &lt;a href="//google.com"&gt;Google&lt;/a&gt;
					| &lt;a class="button" href="//google.com"&gt;Google&lt;/a&gt;
					| &lt;a class="button" href="//google.com"&gt;Google&lt;/a&gt;
			p 通常のJavaScriptの式も問題なく動作します:
			.area_code-diff
				pre: code
					| - var authenticated = true
					| body(class=authenticated ? 'authed' : 'anon')
				pre: code
					| &lt;body class="authed"&gt;&lt;/body&gt;

			section#multiline
				h2 複数行の属性 - Multiline Attributes
				p 多くの属性がある場合は、それらを複数の行に分散させることもできます:
				.area_code-diff
					pre: code
						| input(
						| 	type='checkbox'
						| 	name='agreement'
						| 	checked
						| )
					pre: code
						| &lt;input type="checkbox" name="agreement" checked="checked" /&gt;
				p JavaScriptランタイムがES2015テンプレート文字列をサポートしている場合（Node.js/io.js 1.0.0 以降を含む）、属性にその構文を使用することが可能です。これは、非常に長い値を持つ属性に非常に便利です。
				.area_code-diff
					pre: code
						| input(data-json=`
						| 	{
						| 		"very-long": "piece of ",
						| 		"data": true
						| 	}
						| `)
					pre: code
						| &lt;input data-json="
						| 	{
						| 		"very-long": "piece of ",
						| 		"data": true
						| 	}
						| " /&gt;

			//-------------------------------------------------------------------
			section#quoted
				h2 引用された属性 - Quoted Attributes
				details
					summary 属性名にJavaScript構文に干渉する可能性のある奇数文字が含まれている場合は、#[code ""]または#[code '']を使用して引用するか、コンマを使用して異なる属性を区切ります。 このような文字の例には、<code>[]</code>や #[code ()]（Angular 2で頻繁に使用される）が含まれます。
					p If your attribute name contains odd characters that might interfere with JavaScript syntax, either quote it using #[code ""] or #[code ''], or use commas to separate different attributes. Examples of such characters include <code>[]</code> and #[code ()] (frequently used in Angular 2).
				.area_code-diff
					pre: code
						:escape-html
						| //- この場合、`(click)`は属性名ではなく、
						| //- 関数呼び出しとして扱われ、異常なエラーとなります。
						| div(class='div-class' (click)='play()')
					pre: code
						:escape-html
						| index.pug:4:11
						| 	2| //- 属性名の代わりに関数を呼び出すと、
						| 	3| //- 異常なエラーが発生します。
						|   &gt; 4| div(class='div-class' (click)='play()')
						| ----------------------------------------------------^
						| Syntax Error: Assigning to rvalue
				.area_code-diff
					pre: code
						:escape-html
						| div(class='div-class', (click)='play()')
						| div(class='div-class' '(click)'='play()')
					pre: code
						:escape-html
						| &lt;div class="div-class" (click)="play()"&gt;&lt;/div&gt;
						| &lt;div class="div-class" (click)="play()"&gt;&lt;/div&gt;

			//-------------------------------------------------------------------
			section#interpolation
				h2 属性の補間 - Attribute Interpolation
				.box_red
					h3 Caution
					p Previous versions of Pug/Jade supported an interpolation syntax such as:
					pre: code
						:escape-html
						| a(href="/#{url}") Link
					p This syntax is #[strong no longer supported.] Alternatives are found below. (Check our migration guide for more information on other incompatibilities between Pug v2 and previous versions.)
				p Here are some alternatives you can use to include variables in your attribute:
				ol
					li Simply write the attribute in JavaScript:
						.area_code-diff
							pre: code
								| - var url = 'pug-test.html';
								| a(href='/' + url) Link
								| |
								| |
								| - url = 'https://example.com/'
								| a(href=url) Another link
							pre: code
								| &lt;a href="/pug-test.html"&gt;Link&lt;/a&gt;
								| &lt;a href="https://example.com/"&gt;Another link&lt;/a&gt;

					li If your JavaScript runtime supports ES2015 template strings (including Node.js/io.js 1.0.0 and later), you can also use its syntax to simplify your attributes:
						.area_code-diff
							pre: code
								| - var btnType = 'info'
								| - var btnSize = 'lg'
								| button(type='button' class='btn btn-' + btnType + ' btn-' + btnSize)
								| |
								| |
								| button(type='button' class=`btn btn-${btnType} btn-${btnSize}`)
							pre: code
								| &lt;button class="btn btn-info btn-lg" type="button"&gt;&lt;/button&gt;
								| &lt;button class="btn btn-info btn-lg" type="button"&gt;&lt;/button&gt;

			//-------------------------------------------------------------------
			section#unescaped
				h2 Unescaped Attributes
				p By default, all attributes are escaped—that is,special characters are replaced with escape sequences—to prevent attacks (such as cross site scripting). If you need to use special characters, use != instead of =.
				.area_code-diff
					pre: code
						| div(escaped="&lt;code&gt;")
						| div(unescaped!="&lt;code&gt;")
					pre: code
						| &lt;div escaped="&lt;code&gt;"&gt;&lt;/div&gt;
						| &lt;div unescaped="&lt;code&gt;"&gt;&lt;/div&gt;
				.box_red
					h3 Caution
					p #[strong Unescaped buffered code can be dangerous.] You must be sure to sanitize any user inputs to avoid cross-site scripting.

			//-------------------------------------------------------------------
			section#boolean
				h2 Boolean Attributes
				p Boolean attributes are mirrored by Pug. Boolean values (true and false) are accepted. When no value is specified true is assumed.
				.area_code-diff
					pre: code
						| input(type='checkbox' checked)
						| |
						| |
						| input(type='checkbox' checked=true)
						| |
						| |
						| input(type='checkbox' checked=false)
						| |
						| |
						| input(type='checkbox' checked=true.toString())
					pre: code
						| &lt;input type="checkbox" checked="checked" /&gt;
						| &lt;input type="checkbox" checked="checked" /&gt;
						| &lt;input type="checkbox" /&gt;
						| &lt;input type="checkbox" checked="true" /&gt;
					
				p If the doctype is html, Pug knows not to mirror the attribute, and instead uses the terse style (understood by all browsers).
				.area_code-diff
					pre: code
						| doctype html
						| |
						| |
						| input(type='checkbox' checked)
						| |
						| |
						| input(type='checkbox' checked=true)
						| |
						| |
						| input(type='checkbox' checked=false)
						| |
						| |
						| input(type='checkbox' checked=true && 'checked')
					pre: code
						| &lt;!DOCTYPE html&gt;
						| &lt;input type="checkbox" checked&gt;
						| &lt;input type="checkbox" checked&gt;
						| &lt;input type="checkbox"&gt;
						| &lt;input type="checkbox" checked="checked"&gt;

			//-------------------------------------------------------------------
			section#style
				h2 Style Attributes
				p The style attribute can be a string, like any normal attribute; but it can also be an object, which is handy when styles are generated by JavaScript.
				.area_code-diff
					pre: code a(style={color: 'red', background: 'green'})
					pre: code &lt;a style="color:red;background:green;"&gt;&lt;/a&gt;

			//-------------------------------------------------------------------
			section#class
				h2 Class Attributes
				p The class attribute can be a string, like any normal attribute; but it can also be an array of class names, which is handy when generated from JavaScript.
				.area_code-diff
					pre: code
						:escape-html
						| - var classes = ['foo', 'bar', 'baz']
						| a(class=classes)
						| |
						| |
						| //- the class attribute may also be repeated to merge arrays
						| a.bang(class=classes class=['bing'])
					pre: code
						:escape-html
						| &lt;a class="foo bar baz"&gt;&lt;/a&gt;
						| &lt;a class="bang foo bar baz bing"&gt;&lt;/a&gt;
				p It can also be an object which maps class names to true or false values. This is useful for applying conditional classes
				.area_code-diff
					pre: code
						:escape-html
						| - var currentUrl = '/about'
						| a(class={active: currentUrl === '/'} href='/') Home
						| |
						| |
						| a(class={active: currentUrl === '/about'} href='/about') About
					pre: code
						:escape-html
						| &lt;a href="/"&gt;Home&lt;/a&gt;
						| &lt;a class="active" href="/about"&gt;About&lt;/a&gt;

			//-------------------------------------------------------------------
			section#class-literal
				h2 Class Literal
				p Classes may be defined using a #[code .classname] syntax:
				.area_code-diff
					pre: code a.button
					pre: code &lt;a class="button"&gt;&lt;/a&gt;
				p Since div's are such a common choice of tag, it is the default if you omit the tag name:
				.area_code-diff
					pre: code .content
					pre: code &lt;div class="content"&gt;&lt;/div&gt;

			//-------------------------------------------------------------------
			section#id-literal
				h2 ID Literal
				p IDは、#[code #idname] 構文を使用して定義できます。
				.area_code-diff
					pre: code a#main-link
					pre: code &lt;a id="main-link"&gt;&lt;/a&gt;
				p #[code div]はよく使われるタグなので、タグ名を省略した場合はデフォルトとなります。
				.area_code-diff
					pre: code #content
					pre: code &lt;div id="content"&gt;&lt;/div&gt;

			//-------------------------------------------------------------------
			section#and-attributes
				h2 &attributes
				p Pronounced as “and attributes”, the #[code &attributes] syntax can be used to explode an object into attributes of an element.
				.area_code-diff
					pre: code div#foo(data-bar="foo")&attributes({'data-foo': 'bar'})
					pre: code &lt;div id="foo" data-bar="foo" data-foo="bar"&gt;&lt;/div&gt;
				p The above example uses an object literal. But you can also use a variable whose value is an object, too. (See also: Mixin Attributes).
				.area_code-diff
					pre: code
						:escape-html
						| - var attributes = {};
						| - attributes.class = 'baz';
						| div#foo(data-bar="foo")&attributes(attributes)
					pre: code
						| &lt;div class="baz" id="foo" data-bar="foo"&gt;&lt;/div&gt;
				.box_red
					h3 Caution
					p <strong>Attributes applied using #[code &attributes] are not automatically escaped.</strong> You must be sure to sanitize any user inputs to avoid cross-site scripting (XSS). If passing in #[code attributes] from a mixin call, this is done automatically.

		script hljs.highlightAll();